@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@*Implement Disposable interface to close signalR socket on dispose of component*@
@implements IAsyncDisposable


<div class="form-group">
    <label>
        User : <input @bind="userInput" />

    </label>
</div>
<div class="form-group">
    <label>
        Message : <input @bind="messageInput" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<ul>
    @foreach (string message in messages){
        <li>@message</li>
    }
</ul>
@code {
    private HubConnection? hubConnection;
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        //Create a signalR client for the required hub
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .WithAutomaticReconnect()
        .Build();

        //Subscribe and register call back for the methods that you want to listen to
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var formatedMessage = $"{user}:{message}";
            messages.Add(formatedMessage);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        //Use the signalR clinent to send message to all the other connected clients
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            //Dispose signalR clinet
            await hubConnection.DisposeAsync();
        }
    }
}